#define MOTORBRAZO OUT_B
#define MOTORPINZA OUT_C
#define ANGULOINICIAL 200
#define BRAZOKP 0.55
#define BRAZOKI 0.001
#define PINZAKP 0.055
#define PINZAKI 0.0001
#define MAX_VEL 90
//blu
#include "NXCDefs.h"

#define BT_CONN_BASE 0 // BASE
#define INBOX 1
#define OUTBOX 5
sub BTCheck(int conn){
               if(!BluetoothStatus(conn)==NO_ERR){
                 TextOut(5,LCD_LINE5,"Error");
                 Wait(1000);
                 Stop(true);
                }
}
//Master
int recibir(int bt_conn){
     int in;
     //BTCheck(bt_conn); //check master connection
     ReceiveRemoteNumber(INBOX,true,in);
     return in;
}
//Slave
void mandar(int msg, int bt_conn){
     BTCheck(bt_conn);
     SendRemoteNumber(bt_conn, OUTBOX, msg);

}

//CODE

mutex semaforo;

long anguloActualBrazo = 0;
long anguloActualPinza = 0;
long anguloBrazo = 0;
long anguloPinza = 0;
float integral = 0;

int constraint (int valor, int max, int min){
    if(valor > max) {
     return max;
    }
    if (valor < min)
    {
     return min;
    }
    return valor;
}



void setAnguloBrazo(long angulo)
{
        Acquire(semaforo);
        anguloBrazo = angulo;
        Release(semaforo);
}

void setAnguloPinza(long angulo)
{
        Acquire(semaforo);
        anguloPinza = angulo;
        Release(semaforo);
}

task posicion()
{
     float p = 0;
     float anguloNew = 0;
     float anguloOld = 0;
     float pOld = 0;
     while(true)
     {
        Acquire(semaforo);
        anguloActualBrazo = MotorRotationCount(MOTORBRAZO);
        anguloActualPinza = MotorRotationCount(MOTORPINZA);
        NumOut(1, LCD_LINE1, anguloActualBrazo);
        NumOut(1, LCD_LINE2, anguloActualPinza);
        Release(semaforo);

     }
}

void moverBrazoPosDeseada(int motor, long angulo, float kp, float ki, long anguloActual)
{
     float error = angulo- anguloActual ;
     float integral = integral + error;
     float constantes = kp*error + ki*integral;
     int velocidad = constantes;
     OnFwd(motor, constraint(velocidad, MAX_VEL, -MAX_VEL));

}

void moverBrazo(int motor, long anguloDeseado,float kp,float ki, long anguloActual)
{
       Acquire(semaforo);
       moverBrazoPosDeseada(motor, ANGULOINICIAL-anguloDeseado, kp, ki, anguloActual);
       Release(semaforo);
}

void moverPinza(int motor, long anguloDeseado,float kp,float ki, long anguloActual)
{
       Acquire(semaforo);
       moverBrazoPosDeseada(motor, anguloDeseado, kp, ki, anguloActual);
       Release(semaforo);
}

task movimiento()
{
     while(true)
     {
     //moverBrazo(MOTORBRAZO, anguloBrazo, BRAZOKP, BRAZOKI,anguloActualBrazo);
     moverPinza(MOTORPINZA, anguloPinza, PINZAKP, PINZAKI,anguloActualPinza);
     }
}

int phase = 1;
void nextPhase()
{
    //Acquire(sMovimiento);
    mandar(phase, BT_CONN_BASE);
    bool esperar = true;
    while(esperar)
     {
        if (recibir(BT_CONN_BASE) == 0)
        {
         esperar = false;
        }
     }

     phase++;
     //Release(sMovimiento);
}


task test()
{
     //nextPhase();
     setAnguloPinza(-500);
     Wait(5000);
     setAnguloPinza(0) ;
     //setAnguloBrazo(50);
     //Wait(2000);
     //setAnguloPinza(-300);
     //Wait(5000);
     //setAnguloBrazo(0);

}
task main()
{

     Precedes(posicion, movimiento,test);
}

