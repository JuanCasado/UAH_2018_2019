// Esta parte del codigo se encargara del control de los serbos
// Controlara los serbos de la pinza, el motor y el Bamper

// Imports
// Bluetooth
#include "NXCDefs.h"
// Defininiciones de motores
#define MOTORBRAZO OUT_B
#define MOTORPINZA OUT_A
#define MOTORBAMPER OUT_C

// Definiciones globales
#define TIMER 50
#define LIMITE 220
#define MAX_VEL 90
#define MAX_VELBAMPER 10

// Definiciones de la pinza
#define MARGENPINZA 5
// Apertura
#define PINZAKPABRIR 0.7
#define PINZAKIABRIR 0.01
#define MAX_VELPINZAABRIR 90
// Cerrado
#define PINZAKPCERRAR 0.7
#define PINZAKICERRAR 0.01
#define MAX_VELPINZACERRAR 90

#define MAX_INTEGRAL_PINZA 1000

// Definiciones del brazo
#define MARGENBRAZO 15
// SUBIR
#define BRAZOKPSUBIR 0.1
#define BRAZOKISUBIR 0.01
#define MAX_VELBRAZOSUBIR 90
// BAJAR
#define BRAZOKPBAJAR 0.07
#define BRAZOKIBAJAR 0.08
#define MAX_VELBRAZOBAJAR 90
#define MAX_INTEGRAL_BRAZO_BAJAR 1000

// Definiciones del bamper
#define MARGENBAMPER
#define BAMPERKP 0.55
#define BAMPERKI 0.0001
#define MAX_VELBAMPER 10

// Definiciones bluetooth
#define INBOX 5
#define OUTBOX 1
#define MASTERNAME "NXT16"
#define BT_CONN 0

// Definicion de los angulos desados
#define ANGULOBRAZO90 365//333
#define ANGULOPINZACERRAR 3100//3400
#define ANGULOPINZAMEDIOABIERTO 1900
#define ANGULOBRAZO45 500
#define ANGULOBAMPERDESPLEGADO 1500

// PARTE DEL CODIGO COMUN BEGIN
// Creacion de semaforos
mutex semaforoAccion;
mutex semaforoPinza;
mutex semaforoBrazo;
mutex semaforoBamper;

// Angulos actuales y deseados
long anguloActualBrazo = 0;
long anguloActualPinza = 0;
long anguloActualBamper = 0;
long anguloBrazo = 0;
long anguloPinza = 0;
long anguloBamper = 0;

int timerC = 0;

// Funciones comunes
int constraint (int valor, int max, int min){
    if(valor > max) {
		return max;
    }
    if (valor < min)
    {
		return min;
    }
    return valor;
}


// PARTE DEL CODIGO COMUN END

// PARTE DEL BLUETOOTH BEGIN
// Establecer conexion con el maestro
sub BTCheck(int conn){
    CommBTConnectionType args;
    args.Name = MASTERNAME; // whatever the master NXT's name is
    args.ConnectionSlot = conn; // this is the desired connection slot (the above code uses 1)
    args.Action = TRUE; // could use some #define with a non-zero value to connect.  0 == disconnect
    if(!BluetoothStatus(conn)==NO_ERR)
    {
        SysCommBTConnection(args); // try to connect.
    }
}

// Recibir un numero del maestro
int recibir(int bt_conn){
	int in;
	ReceiveRemoteNumber(INBOX,true,in);
	NumOut(1,LCD_LINE2,in);
	return in;
}

// Enviar un numero al maestro
void mandar(int msg, int bt_conn){
	SendRemoteNumber(bt_conn, OUTBOX, msg);
}


// PARTE DEL BLUETOOTH END

// PARTE SET POSICION DESEADA ANGULOS BEGIN

float pinzakp = 0, brazokp = 0, bamperkp = 0;
float pinzaki = 0, brazoki = 0, bamperki = 0;

void setAnguloBrazo(long angulo)
{
	Acquire(semaforoBrazo);
	anguloBrazo = angulo;
  timerC=0;
  Release(semaforoBrazo);
}

void setAnguloPinza(long angulo)
{
	Acquire(semaforoPinza);
	anguloPinza = angulo;
  timerC=0;
	Release(semaforoPinza);
}

void setAnguloBamper(long angulo)
{
	Acquire(semaforoBamper);
	anguloBamper = angulo;
    // set the kpi for the acction
    bamperkp = BAMPERKP;
    bamperki = BAMPERKI; 
	Release(semaforoBamper);
}


// PARTE SET POSICION DESEADA ANGULOS END

// PARTE DE OBTENER ANGULO ACTUAL DE LOS MOTORES BEGIN

task posicion()
{

  while(true)
	{
		Acquire(semaforoBrazo);
    anguloActualBrazo = MotorRotationCount(MOTORBRAZO);
    Release(semaforoBrazo);
		Acquire(semaforoPinza);
		anguloActualPinza = MotorRotationCount(MOTORPINZA);
		Release(semaforoPinza);
		Acquire(semaforoBamper);
		anguloActualBamper = MotorRotationCount(MOTORBAMPER);
		Release(semaforoBamper);
	}
}

// PARTE DE OBTENER ANGULO ACTUAL DE LOS MOTORES END

// PARTE DEL MOVIMIENTO DE MOTORES BEGIN
// Ver si el angulo llega a la posicion deseada dentro del margen
bool checkAngulo(long angulo1, long angulo2, long MARGEN)
{

	if(abs(angulo1 - angulo2) < MARGEN)
	{
		return true;
	} else {
		return false;
	}
}



float getbrazoki(float anguloBrazo,float anguloActualBrazo){
 // set the kpi for the acction
    if (anguloBrazo > anguloActualBrazo)
    {
        // Entonces el brazo esta bajando
        return BRAZOKIBAJAR;
    }else{
        // Si el angulo es negativo esta subiendo
        return BRAZOKISUBIR;
    }
}

float getbrazokp(float anguloBrazo,float anguloActualBrazo){
 // set the kpi for the acction
    if (anguloBrazo > anguloActualBrazo)
    {
        // Entonces el brazo esta bajando
        return BRAZOKPBAJAR;
    }else{
        // Si el angulo es negativo esta subiendo
        return BRAZOKPSUBIR;
    }
}

float getpinzakp(float anguloPinza,float anguloActualPinza){
 // set the kpi for the acction
    // set the kpi for the acction
    if (anguloPinza > anguloActualPinza)
    {
        // Entonces la pinza se cierra
        return PINZAKPCERRAR;

    }else{
        // Si el angulo es negativo esta abriendo
        return PINZAKPABRIR;

    }
}


float getpinzaki(float anguloPinza,float anguloActualPinza){
 // set the kpi for the acction
    // set the kpi for the acction
    if (anguloPinza > anguloActualPinza)
    {
        // Entonces la pinza se cierra

        return PINZAKICERRAR;
    }else{
        // Si el angulo es negativo esta abriendo

        return PINZAKIABRIR;
    }
}


task movimiento()
{

  long errorBrazo = 0, errorPinza= 0, errorBamper = 0;
	float integralBrazo = 0, integralPinza = 0, integralBamper = 0;
	float constantesBrazo = 0, constantesPinza = 0, constantesBamper = 0;
    int countB = 0;
	int velocidadBrazo, velocidadPinza, velocidadBamper;
	while(true)
	{
		// Calculo velocidad motor Brazo
		//ClearScreen();
		Acquire(semaforoBrazo);
		errorBrazo = anguloBrazo - anguloActualBrazo ;



    if(checkAngulo(anguloBrazo, anguloActualBrazo, MARGENBRAZO)){


    }else{
    integralBrazo = constraint(integralBrazo, MAX_INTEGRAL_BRAZO_BAJAR, -MAX_INTEGRAL_BRAZO_BAJAR) + errorBrazo;
    }  // setting brazokp or ki when setting the angle

    constantesBrazo = getbrazokp(anguloBrazo, anguloActualBrazo)*errorBrazo + getbrazoki(anguloBrazo, anguloActualBrazo)*integralBrazo;



    Release(semaforoBrazo);
		velocidadBrazo = constantesBrazo;

		// Calculo velocidad motor Pinza
		Acquire(semaforoPinza);

		errorPinza = anguloPinza - anguloActualPinza ;

		timerC++;
		//integralPinza = integralPinza + errorPinza;
    if(checkAngulo(anguloPinza, anguloActualPinza, MARGENPINZA)){

    }else{
    integralPinza = constraint(integralPinza, MAX_INTEGRAL_PINZA, -MAX_INTEGRAL_PINZA) + errorPinza;
    }
    if (timerC > LIMITE)
    {
     setAnguloPinza(anguloActualPinza);
     timerC = 0;
    } else{
    
    timerC++;
    }
		constantesPinza = getpinzakp(anguloPinza, anguloActualPinza)*errorPinza + getpinzaki(anguloPinza, anguloActualPinza)*integralPinza;
    Release(semaforoPinza);

		velocidadPinza = constantesPinza;
		// Calculo velocidad motor Bamper
		Acquire(semaforoBamper);
		errorBamper = anguloBamper - anguloActualBamper ;

		integralBamper = integralBamper + errorBamper;
		constantesBamper = bamperkp*errorBamper + bamperki*integralBamper;
        Release(semaforoBamper);
		velocidadBamper = constantesBamper;
		// Set motores
		OnFwd(MOTORBRAZO, constraint(velocidadBrazo, MAX_VEL, -MAX_VEL));
		OnFwd(MOTORPINZA, constraint(velocidadPinza, MAX_VEL, -MAX_VEL));
		OnFwd(MOTORBAMPER, constraint(velocidadBamper, MAX_VELBAMPER, -MAX_VELBAMPER));
		Wait(TIMER);
	}
}

// PARTE DEL MOVIMIENTO DE MOTORES END

// PARTE DE LAS TAREAS QUE SE VAN A EJECTUAR BEGIN
void esperar(int num)
{
	bool bucle = true;
	int count = 0;
	switch(num)
	{
	case 0:
	while(bucle)
	{
        Acquire(semaforoBrazo);
        if (timerC == LIMITE)
        {
            count = 5;
        }
        if(count == 5){
            bucle = false;
            timerC = 0;
    	}
        if(checkAngulo(anguloBrazo, anguloActualBrazo, MARGENBRAZO)){
            count++;
        }
        Release(semaforoBrazo);
	}
	break;
	case 1:
		while(bucle)
		{
			Acquire(semaforoPinza);
			if (timerC == LIMITE)
			{
				count = 5;
			}
			if(count == 5){
				bucle = false;
				timerC = 0;
			}
			if(checkAngulo(anguloPinza, anguloActualPinza, MARGENPINZA)){
				count++;
			}
			Release(semaforoPinza);
		}
		break;
	case 2:
		while(bucle)
		{
			Acquire(semaforoBamper);
			if (timerC == LIMITE)
			{
				count = 5;
			}
			if(count == 5){
				bucle = false;
				timerC = 0;
			}
			if(checkAngulo(anguloBamper, anguloActualBamper, MARGENBAMPER)){
				count++;
			}
			Release(semaforoBamper);
		}
		break;
	}
		//fase++;
		Wait(1000);
}

void recogerFicha()
{
	Wait(1000);
	//Empieza arriba

	setAnguloBrazo(ANGULOBRAZO45);
	esperar(0);


	setAnguloPinza(ANGULOPINZAMEDIOABIERTO);
	esperar(1);
	//baja brazo 90
	//Acquire(semaforoAccion);

	setAnguloBrazo(ANGULOBRAZO90);
	esperar(0);

	//cierra pinza
	//Acquire(semaforoAccion);

	setAnguloPinza(ANGULOPINZACERRAR);
	esperar(1);

	//brazo sube
	//Acquire(semaforoAccion);

	setAnguloBrazo(0);
	esperar(0);

	//abrir pinza  mitad
	//Acquire(semaforoAccion);

	setAnguloPinza(ANGULOPINZAMEDIOABIERTO);
	esperar(1);

	//bajar brazo 45ï¿½
	//Acquire(semaforoAccion);

	setAnguloBrazo(ANGULOBRAZO45);
	esperar(0);

	//terminar abrir pinnza
	//Acquire(semaforoAccion);

	setAnguloPinza(0);
	esperar(1);

	//barrea delante
	//Acquire(semaforoAccion);

	setAnguloBamper(ANGULOBAMPERDESPLEGADO);
	esperar(2);

	//subir brazo arriba
	//Acquire(semaforoAccion);

	setAnguloBrazo(0);
	esperar(0);

	//mover deslizador hacia atras
	setAnguloBamper(0);
	esperar(2);

}

// TODO: bajar brazo, subir brazo y lo otro medienta bluetooth
// TODO: intervalos para deshabilitar
// TODO: aÃ±adir los escaneres de click y los de luz, activar sensores cuando luz activa
void bajarBrazo()
{
    setAnguloBrazo(ANGULOBRAZO90);
}

void subirBrazo()
{
    setAnguloBrazo(20);


}

void abrirPinza()
{
    setAnguloPinza(0);

}

void cerrarPinza()
{
    setAnguloPinza(ANGULOPINZACERRAR);

}

// PARTE DE LAS TAREAS QUE SE VAN A EJECUTAR END

// PARTE ENCARGADA DE ESPERAR LAS ORDENES QUE LE DEN BEGIN
void ejecutar(int mensage)
{
    switch(mensage)
    {
        case 1:
            bajarBrazo();
            break;
        case 2:
            subirBrazo();
            break;
        case 3:
            cerrarPinza();
            break;
        case 4:
            abrirPinza();
            break;
        default:
            break;
    }
}
unsigned long millis()
{
 return CurrentTick() - FirstTick()
}
task rutina()
{
    bajarBrazo();
    NumOut(1, LCD_LINE2, anguloBrazo);
    Wait(10000);
    subirBrazo();
    NumOut(1, LCD_LINE2, anguloBrazo);
    bool first = true;
    bool second = true;
    bool tri = true;
    bool cua = true;
     while(true)
     {
     ClearScreen();
     NumOut(1, LCD_LINE1, millis());
     if ((millis()> 28660) && first){
      first = false;
      bajarBrazo();
      Wait(2000);
      cerrarPinza();
     }
     if ((millis()>34380) && second)
     {
        second= false;
        abrirPinza();
     }
     if ((millis()>50920) && tri)
     {
        tri= false;
        cerrarPinza();
        Wait(2000);
        subirBrazo();
     }
     if ((millis()>71350) && cua)
     {
        cua= false;
        bajarBrazo();
        Wait(2000);
        abrirPinza();
        Wait(2000);
        cerrarPinza();
        Wait(2000);
        subirBrazo();
     }
     }

}


// PARTE ENCARGADA DE ESPERAR LAS ORDENES QUE LE DEN END

// Task main
task main()
{
    // Comprobamos si hay conexion con el maestro
    //BTCheck(BT_CONN);
    // Ejecutamos los hilos paralelos

	Precedes(posicion, movimiento, rutina);
}
